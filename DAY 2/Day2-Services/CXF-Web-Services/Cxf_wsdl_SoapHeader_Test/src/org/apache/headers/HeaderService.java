package org.apache.headers;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.8
 * 2013-06-30T22:12:18.872+05:30
 * Generated source version: 2.6.8
 * 
 */
@WebServiceClient(name = "HeaderService", 
                  wsdlLocation = "http://localhost:9000/headers?wsdl",
                  targetNamespace = "http://apache.org/headers") 
public class HeaderService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://apache.org/headers", "HeaderService");
    public final static QName SoapPort = new QName("http://apache.org/headers", "SoapPort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:9000/headers?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HeaderService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:9000/headers?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HeaderService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HeaderService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HeaderService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPort")
    public HeaderTester getSoapPort() {
        return super.getPort(SoapPort, HeaderTester.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HeaderTester
     */
    @WebEndpoint(name = "SoapPort")
    public HeaderTester getSoapPort(WebServiceFeature... features) {
        return super.getPort(SoapPort, HeaderTester.class, features);
    }

}
